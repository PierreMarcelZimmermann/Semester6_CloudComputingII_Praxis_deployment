---
- name: Setup Backend und Frontend auf Remote VM
  hosts: myVM
  become: yes
  tasks:

    # Erstelle das Zielverzeichnis für das Backend, falls es nicht existiert
    - name: Erstelle /home/app/backend Verzeichnis
      file:
        path: /home/app/backend
        state: directory
        owner: azureadmin
        group: azureadmin
        mode: '0755'

    # Kopiere Backend-Dateien (ohne __pycache__)
    - name: Kopiere Backend-Dateien (ohne __pycache__)
      find:
        paths: "../../app/backend"
        recurse: yes
        patterns: "*"
        excludes:
          - "__pycache__/*"
      register: backend_files

    - name: Kopiere Backend-Dateien ins Zielverzeichnis
      copy:
        src: "{{ item.path }}"
        dest: "/home/app/backend/{{ item.path | basename }}"
        owner: azureadmin
        group: azureadmin
        mode: '0644'
      with_items: "{{ backend_files.files }}"

    # Installiere python3-venv, falls es nicht installiert ist
    - name: Installiere python3-venv
      apt:
        name: python3-venv
        state: present
        update_cache: yes

    # Installiere virtualenv mit pip (falls es nicht installiert ist)
    - name: Installiere virtualenv
      apt:
        name: python3-virtualenv
        state: present
        update_cache: yes

    # Erstelle die virtuelle Umgebung für das Backend
    - name: Erstelle die virtuelle Umgebung
      command: python3 -m venv /home/app/backend/.venv

    # Installiere die Anforderungen aus der requirements.txt in der virtuellen Umgebung
    - name: Installiere Backend-Anforderungen
      pip:
        requirements: /home/app/backend/requirements.txt
        virtualenv: /home/app/backend/.venv/

    # Starte die Flask-Anwendung im Hintergrund
    - name: Starte Flask-Anwendung im Hintergrund
      shell: |
        nohup . /home/app/backend/.venv/bin/activate && flask run --host=0.0.0.0 --port=5000 > /home/app/backend/flask.log 2>&1 &
      args:
        chdir: /home/app/backend

    # Installiere rsync auf der Remote-VM, falls nicht installiert
    - name: Installiere rsync auf der Remote-VM
      apt:
        name: rsync
        state: present
        update_cache: yes

    # Erstelle das Zielverzeichnis für das Frontend, falls es nicht existiert
    - name: Erstelle /home/app/frontend Verzeichnis
      file:
        path: /home/app/frontend
        state: directory
        owner: azureadmin
        group: azureadmin
        mode: '0755'

    # Finde alle Dateien im Frontend-Verzeichnis (außer node_modules)
    - name: Finde alle Dateien im Frontend-Verzeichnis (außer node_modules)
      find:
        paths: "../../app/frontend"
        recurse: yes
        patterns: "*"
        excludes:
          - "node_modules/*"
      register: frontend_files

    # Kopiere Frontend-Dateien ins Zielverzeichnis
    - name: Kopiere Frontend-Dateien ins Zielverzeichnis
      copy:
        src: "{{ item.path }}"
        dest: "/home/app/frontend/{{ item.path | basename }}"
        owner: azureadmin
        group: azureadmin
        mode: '0644'
      with_items: "{{ frontend_files.files }}"

    # Kopiere package.json und package-lock.json Dateien (nur die notwendigsten)
    - name: Kopiere package.json
      copy:
        src: ../../app/frontend/package.json
        dest: /home/app/frontend/package.json
        owner: azureadmin
        group: azureadmin
        mode: '0644'

    - name: Kopiere package-lock.json
      copy:
        src: ../../app/frontend/package-lock.json
        dest: /home/app/frontend/package-lock.json
        owner: azureadmin
        group: azureadmin
        mode: '0644'

    # Installiere Node.js und npm (wird hier korrekt für Ubuntu installiert)
    - name: Installiere Node.js und npm
      apt:
        name:
          - curl
          - ca-certificates
          - lsb-release
          - apt-transport-https
        state: present
        update_cache: yes

    - name: Füge NodeSource APT-Repository hinzu
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
      args:
        creates: /usr/bin/node

    - name: Installiere Node.js und npm (mit dem richtigen Paket)
      apt:
        name:
          - nodejs
        state: present
        update_cache: yes

    # Installiere die Frontend-Abhängigkeiten mit npm (installiert nur, was in package.json definiert ist)
    - name: Installiere Frontend-Abhängigkeiten mit npm
      npm:
        path: /home/app/frontend
        state: present

    # Baue das Frontend (starte den Build mit npx)
    - name: Baue das Frontend
      shell: |
        cd /home/app/frontend && npx next build
      args:
        chdir: /home/app/frontend

    # Starte die Next.js-Anwendung mit npx
    - name: Starte die Next.js-Anwendung mit npx
      shell: |
        cd /home/app/frontend && npx next dev --host 0.0.0.0 --port 3000
      args:
        chdir: /home/app/frontend
